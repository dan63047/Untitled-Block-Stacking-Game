use bevy::utils::HashMap;
use lazy_static::lazy_static;

#[derive(Clone)]
pub enum LockDelayMode{
    Disabled,
    Gravity,
    ResetOnYChange,
    ResetOnMovementLimited,
    ResetOnMovement
}

#[derive(Clone)]
pub struct PiecesData {
    // X and Y from bottom left point (pieces[piece][rotation] = Vec of coords for Minos)
    pub pieces: Vec<Vec<Vec<(u8, u8)>>>,
    // X and Y shifts for pieces (kicks[piece][rotation before spin][direction of rotation] = Vec of points for tests)
    pub kicks: Vec<Vec<Vec<Vec<(i8, i8)>>>>,
    // Takes 64x64 sprite fragment with this index as Mino skin (skin_index[piece])
    pub skin_index: Vec<usize>,
    // If spawn position is fucked, it fixes it
    pub spawn_offsets: Vec<(isize, isize)>,
    pub lock_delay_mode: LockDelayMode
}

lazy_static!{
    pub static ref ROTATION_SYSTEMS: HashMap<String, PiecesData> = {
        let mut rs = HashMap::new();
        rs.insert(String::from("SRS"), PiecesData{
            pieces: vec![
                vec![ // Z
                    vec![(0, 2), (1, 2), (1, 1), (2, 1)],
                    vec![(2, 2), (2, 1), (1, 1), (1, 0)],
                    vec![(2, 0), (1, 0), (1, 1), (0, 1)],
                    vec![(0, 0), (0, 1), (1, 1), (1, 2)]
                ],
                vec![ // J
                    vec![(0, 2), (0, 1), (1, 1), (2, 1)],
                    vec![(2, 2), (1, 2), (1, 1), (1, 0)],
                    vec![(2, 0), (2, 1), (1, 1), (0, 1)],
                    vec![(0, 0), (1, 0), (1, 1), (1, 2)]
                ],
                vec![ // I
                    vec![(0, 2), (1, 2), (2, 2), (3, 2)],
                    vec![(2, 3), (2, 2), (2, 1), (2, 0)],
                    vec![(3, 1), (2, 1), (1, 1), (0, 1)],
                    vec![(1, 0), (1, 1), (1, 2), (1, 3)]
                ],
                vec![ // T
                    vec![(1, 2), (0, 1), (1, 1), (2, 1)],
                    vec![(2, 1), (1, 2), (1, 1), (1, 0)],
                    vec![(1, 0), (2, 1), (1, 1), (0, 1)],
                    vec![(0, 1), (1, 0), (1, 1), (1, 2)]
                ],
                vec![ // O
                    vec![(0, 0), (0, 1), (1, 1), (1, 0)],
                    vec![(0, 1), (1, 1), (1, 0), (0, 0)],
                    vec![(1, 1), (1, 0), (0, 0), (0, 1)],
                    vec![(1, 0), (0, 0), (0, 1), (1, 1)]
                ],
                vec![ // L
                    vec![(2, 2), (2, 1), (1, 1), (0, 1)],
                    vec![(2, 0), (1, 0), (1, 1), (1, 2)],
                    vec![(0, 0), (0, 1), (1, 1), (2, 1)],
                    vec![(0, 2), (1, 2), (1, 1), (1, 0)]
                ],
                vec![ // S
                    vec![(2, 2), (1, 2), (1, 1), (0, 1)],
                    vec![(2, 0), (2, 1), (1, 1), (1, 2)],
                    vec![(0, 0), (1, 0), (1, 1), (2, 1)],
                    vec![(0, 2), (0, 1), (1, 1), (1, 0)]
                ]
            ],
            kicks: vec![
                vec![ // Z
                    vec![
                        vec![( 0, 0),(-1, 0),(-1, 1),( 0,-2),(-1,-2)], // 0 -> 90
                        vec![( 0, 0),( 1, 0),( 1, 1),( 0,-2),( 1,-2)], // 0 -> 270
                        ],
                    vec![
                        vec![( 0, 0),( 1, 0),( 1,-1),( 0, 2),( 1, 2)], // 90 -> 180
                        vec![( 0, 0),( 1, 0),( 1,-1),( 0, 2),( 1, 2)], // 90 -> 0
                        ],
                    vec![
                        vec![( 0, 0),( 1, 0),( 1, 1),( 0,-2),( 1,-2)], // 180 -> 270
                        vec![( 0, 0),(-1, 0),(-1, 1),( 0,-2),(-1,-2)], // 180 -> 90
                        ], 
                    vec![
                        vec![( 0, 0),(-1, 0),(-1,-1),( 0, 2),(-1, 2)], // 270 -> 0
                        vec![( 0, 0),(-1, 0),(-1,-1),( 0, 2),(-1, 2)], // 270 -> 180
                        ] 
                ],
                vec![ // J
                    vec![
                        vec![( 0, 0),(-1, 0),(-1, 1),( 0,-2),(-1,-2)], // 0 -> 90
                        vec![( 0, 0),( 1, 0),( 1, 1),( 0,-2),( 1,-2)], // 0 -> 270
                        ],
                    vec![
                        vec![( 0, 0),( 1, 0),( 1,-1),( 0, 2),( 1, 2)], // 90 -> 180
                        vec![( 0, 0),( 1, 0),( 1,-1),( 0, 2),( 1, 2)], // 90 -> 0
                        ],
                    vec![
                        vec![( 0, 0),( 1, 0),( 1, 1),( 0,-2),( 1,-2)], // 180 -> 270
                        vec![( 0, 0),(-1, 0),(-1, 1),( 0,-2),(-1,-2)], // 180 -> 90
                        ], 
                    vec![
                        vec![( 0, 0),(-1, 0),(-1,-1),( 0, 2),(-1, 2)], // 270 -> 0
                        vec![( 0, 0),(-1, 0),(-1,-1),( 0, 2),(-1, 2)], // 270 -> 180
                        ] 
                ],
                vec![ // I
                    vec![
                        vec![( 0, 0),(-2, 0),( 1, 0),(-2,-1),( 1, 2)], // 0 -> 90
                        vec![( 0, 0),(-1, 0),( 2, 0),(-1, 2),( 2,-1)], // 0 -> 270
                        ],
                    vec![
                        vec![( 0, 0),(-1, 0),( 2, 0),(-1, 2),( 2,-1)], // 90 -> 180
                        vec![( 0, 0),( 2, 0),(-1, 0),( 2, 1),(-1,-2)], // 90 -> 0
                        ],
                    vec![
                        vec![( 0, 0),( 2, 0),(-1, 0),( 2, 1),(-1,-2)], // 180 -> 270
                        vec![( 0, 0),( 1, 0),(-2, 0),( 1,-2),(-2, 1)], // 180 -> 90
                        ],
                    vec![
                        vec![( 0, 0),( 1, 0),(-2, 0),( 1,-2),(-2, 1)], // 270 -> 0
                        vec![( 0, 0),(-2, 0),( 1, 0),(-2,-1),( 1, 2)], // 270 -> 180
                        ]
                ],
                vec![ // T
                    vec![
                        vec![( 0, 0),(-1, 0),(-1, 1),( 0,-2),(-1,-2)], // 0 -> 90
                        vec![( 0, 0),( 1, 0),( 1, 1),( 0,-2),( 1,-2)], // 0 -> 270
                        ],
                    vec![
                        vec![( 0, 0),( 1, 0),( 1,-1),( 0, 2),( 1, 2)], // 90 -> 180
                        vec![( 0, 0),( 1, 0),( 1,-1),( 0, 2),( 1, 2)], // 90 -> 0
                        ],
                    vec![
                        vec![( 0, 0),( 1, 0),( 1, 1),( 0,-2),( 1,-2)], // 180 -> 270
                        vec![( 0, 0),(-1, 0),(-1, 1),( 0,-2),(-1,-2)], // 180 -> 90
                        ], 
                    vec![
                        vec![( 0, 0),(-1, 0),(-1,-1),( 0, 2),(-1, 2)], // 270 -> 0
                        vec![( 0, 0),(-1, 0),(-1,-1),( 0, 2),(-1, 2)], // 270 -> 180
                        ] 
                ],
                vec![ // O
                    vec![
                        vec![( 0, 0)], // 0 -> 90
                        vec![( 0, 0)], // 0 -> 270
                        ],
                    vec![
                        vec![( 0, 0)], // 90 -> 180
                        vec![( 0, 0)], // 90 -> 0
                        ],
                    vec![
                        vec![( 0, 0)], // 180 -> 270
                        vec![( 0, 0)], // 180 -> 90
                        ], 
                    vec![
                        vec![( 0, 0)], // 270 -> 0
                        vec![( 0, 0)], // 270 -> 180
                        ] 
                ],
                vec![ // L
                    vec![
                        vec![( 0, 0),(-1, 0),(-1, 1),( 0,-2),(-1,-2)], // 0 -> 90
                        vec![( 0, 0),( 1, 0),( 1, 1),( 0,-2),( 1,-2)], // 0 -> 270
                        ],
                    vec![
                        vec![( 0, 0),( 1, 0),( 1,-1),( 0, 2),( 1, 2)], // 90 -> 180
                        vec![( 0, 0),( 1, 0),( 1,-1),( 0, 2),( 1, 2)], // 90 -> 0
                        ],
                    vec![
                        vec![( 0, 0),( 1, 0),( 1, 1),( 0,-2),( 1,-2)], // 180 -> 270
                        vec![( 0, 0),(-1, 0),(-1, 1),( 0,-2),(-1,-2)], // 180 -> 90
                        ], 
                    vec![
                        vec![( 0, 0),(-1, 0),(-1,-1),( 0, 2),(-1, 2)], // 270 -> 0
                        vec![( 0, 0),(-1, 0),(-1,-1),( 0, 2),(-1, 2)], // 270 -> 180
                        ] 
                ],
                vec![ // S
                    vec![
                        vec![( 0, 0),(-1, 0),(-1, 1),( 0,-2),(-1,-2)], // 0 -> 90
                        vec![( 0, 0),( 1, 0),( 1, 1),( 0,-2),( 1,-2)], // 0 -> 270
                        ],
                    vec![
                        vec![( 0, 0),( 1, 0),( 1,-1),( 0, 2),( 1, 2)], // 90 -> 180
                        vec![( 0, 0),( 1, 0),( 1,-1),( 0, 2),( 1, 2)], // 90 -> 0
                        ],
                    vec![
                        vec![( 0, 0),( 1, 0),( 1, 1),( 0,-2),( 1,-2)], // 180 -> 270
                        vec![( 0, 0),(-1, 0),(-1, 1),( 0,-2),(-1,-2)], // 180 -> 90
                        ], 
                    vec![
                        vec![( 0, 0),(-1, 0),(-1,-1),( 0, 2),(-1, 2)], // 270 -> 0
                        vec![( 0, 0),(-1, 0),(-1,-1),( 0, 2),(-1, 2)], // 270 -> 180
                        ] 
                ],
            ],
            skin_index: vec![0, 1, 2, 3, 4, 5, 6],
            spawn_offsets: vec![
                (0,  0), // Z
                (0,  0), // J
                (0, -1), // I
                (0,  0), // T
                (1,  1), // O
                (0,  0), // L
                (0,  0)  // S
            ],
            lock_delay_mode: LockDelayMode::ResetOnMovementLimited
        });
        rs
    };
}